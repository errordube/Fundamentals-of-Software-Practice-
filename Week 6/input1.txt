Lucene is a powerful Java search library that lets you easily add search
to any application. In recent years Lucene has become exceptionally
popular and is now the most widely used information retrieval library:
it powers the search features behind many websites and desktop
applications. Although it's written in Java, thanks to its popularity
and the determination of zealous developers you now have at your
disposal a number of ports or integrations to other programming
languages.

One of the key factors behind Lucene's popularity is its simplicity, but
don't let that fool you: under the hood sophisticated, state-of-the-art
information retrieval techniques are quietly at work. The careful
exposure of its indexing and searching API is a sign of the
well-designed software. You don't need in-depth knowledge about how
Lucene's information indexing and retrieval work in order to start using
it. Moreover, Lucene's straightforward API requires using only a handful
of classes to get started.

Lucene is a high-performance, scalable information retrieval (IR)
library. IR refers to the process of searching for documents,
information within documents, or metadata about documents. Lucene lets
you add searching capabilities to your applications. It's a mature,
free, open source project implemented in Java, and a project in the
Apache Software Foundation, licensed under the liberal Apache Software
License. As such, Lucene is currently, and has been for quite a few
years, the most popular free IR library.

Lucene allows you to add search capabilities to your application. Lucene
can index and make searchable any data that you can extract text from.
Lucene doesn't care about the source of the data, its format, or even
its language, as long as you can derive text from it. This means you can
index and search data stored in files: web pages on remote web servers,
documents stored in local file systems, simple text files, Microsoft
Word documents, XML or HTML or PDF files, or any other format from which
you can extract textual information.

A search application starts with an indexing chain, which in turn
requires separate steps to retrieve the raw content; create documents
from the content, possibly extracting text from binary documents; and
index the documents. Once the index is built, the components required
for searching are equally diverse, including a user interface, a means
for building up a programmatic query, query execution (to retrieve
matching documents), and results rendering.
